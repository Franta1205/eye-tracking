<div class="min-h-screen bg-gray-50 py-12">
  <div class="sm:mx-auto sm:w-full sm:max-w-2xl">
    <div class="bg-white rounded-2xl shadow-sm border border-gray-100 px-8 py-10">
      <h2 class="text-2xl font-bold text-gray-900 mb-8">Create New Analysis</h2>
      
      <%= form_with(model: @analysis, local: true, html: { class: "space-y-6" }) do |form| %>
        <% if @analysis.errors.any? %>
          <div class="rounded-lg bg-red-50 p-4 border border-red-200">
            <h3 class="text-sm font-medium text-red-800">Please fix the following errors:</h3>
            <ul class="mt-2 text-sm text-red-700 list-disc list-inside">
              <% @analysis.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <div>
          <%= form.label :name, class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.text_field :name, 
              class: "block w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-gray-900 focus:ring-1 focus:ring-gray-900 transition-colors",
              placeholder: "Enter analysis name" %>
        </div>

        <div>
          <%= form.label :analysis_type, class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.select :analysis_type, 
              options_for_select(Analysis.analysis_types.map {|key, value| [key.humanize, key]}),
              { prompt: "Select analysis type" },
              class: "block w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-gray-900 focus:ring-1 focus:ring-gray-900 transition-colors" %>
        </div>

        <div>
          <%= form.label :participants, "Number of Participants", class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.number_field :participants, 
              class: "block w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-gray-900 focus:ring-1 focus:ring-gray-900 transition-colors",
              placeholder: "Enter number of participants",
              min: 1 %>
        </div>

        <div>
          <%= form.label :image, "Upload Image", class: "block text-sm font-medium text-gray-700 mb-2" %>
          <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
            <%= form.file_field :image, 
                class: "hidden",
                id: "image-upload",
                accept: "image/*" %>
            <label for="image-upload" class="cursor-pointer">
              <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <p class="mt-2 text-sm text-gray-600">Click to upload or drag and drop</p>
              <p class="text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
            </label>
          </div>
        </div>

        <div>
          <%= form.label :goals, "Analysis Goals", class: "block text-sm font-medium text-gray-700 mb-2" %>
          <%= form.text_area :goals, 
              rows: 4,
              class: "block w-full px-4 py-3 rounded-lg border border-gray-200 focus:border-gray-900 focus:ring-1 focus:ring-gray-900 transition-colors",
              placeholder: "Describe the goals of this analysis..." %>
        </div>

        <div class="pt-4">
          <%= form.submit "Create Analysis", 
              class: "w-full flex justify-center py-3 px-4 rounded-lg text-sm font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors cursor-pointer" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  // Preview uploaded image
  document.getElementById('image-upload').addEventListener('change', function(e) {
    const fileName = e.target.files[0]?.name;
    if (fileName) {
      const label = e.target.nextElementSibling;
      label.querySelector('p').textContent = fileName;
    }
  });
</script>